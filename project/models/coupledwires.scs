* Path, Component, Release: cmrf7sf/relAM/Spectre/models/coupledwires.scs, rf7sf_models, mod_cmrf7sf
* CMVC Revision: 1.1 07/06/11 11:56:44
*
*>  IBM CMRF7SF (AM metal option) "coupledwires" transmission line
*
***************************************************************************
*
*  Coupledwire transmission line model 
*
***************************************************************************
*
* The coupledwire model contains:
*
*  1. Seven identical blocks connected in series. 
*     Example of one of such a block is shown below.
*     
*  2. Ladder network models frequency dependent skin effect.
*
*                                           vshield 
*                                              o
*                                              |
*                                              |
*      +---------------------------------------+---------------------------------------+
*      |                                                                               |
*      |                                                                               |
*      |                                                                               |
*    ----- Ctotl/14                                                         Ctotl/14 ----- 
*    -----                                                                           -----
*      |                                                                               |  
*      |                                                                               |
*      |             ________                                                          |        
*  va1 |   Rtotl/7  |        |       delta_Rl/7      delta_Rl*rt/7  delta_Rl*(rt^2)/7  | vb1
*  o---+---/\/\/\---|        |-+-+-----/\/\/\-----+-----/\/\/\-----+----/\/\/\-----+---+---o    
*      |            |________| | |    ________    |    ________    |    _______    |   |
*      |             Ltotl/7   | |   |        |   |   |        |   |   |       |   |   |
*      |                       | |---|        |---+---|        |---+---|       |---|   |
*      |                       |     |________|       |________|       |_______|       |
*      |                      _|_    delta_Ll/7      delta_Ll/rt/7  delta_Ll/rt^2/7    |
*    -----                   |   |                                                   -----
*    -----                   |   |                                                   -----
*      |  Cctotl/14          |   | mutual_inductor (Kl)                     Cctotl/14  |
*      |                     |___|                                                     |      
*      |                       |                                                       |
*      |                       |                                                       |
*      |             ________  |                                                       | 
*  va2 |   Rtotl/7  |        | |      delta_Rl/7     delta_Rl*rt/7  delta_Rl*(rt^2)/7  | vb2
*  o---+---/\/\/\---|        |-+-+-----/\/\/\-----+-----/\/\/\-----+----/\/\/\-----+---+---o
*      |            |________|   |    ________    |    ________    |    _______    |   |
*      |             Ltotl/7     |   |        |   |   |        |   |   |       |   |   |
*      |                         |---|        |---+---|        |---+---|       |---|   |
*      |                             |________|       |________|       |_______|       |   
*      |                              delta_Ll/7      delta_Ll/rt/7  delta_Ll/rt^2/7   |
*    -----                                                                           -----   
*    ----- Ctotl/14                                                         Ctotl/14 -----   
*      |                                                                               |
*      |                                                                               |
*      |                                                                               |
*      +---------------------------------------+---------------------------------------+
*                                              |
*                                              |
*                                              o      
*                                           vshield 
*
***************************************************************************
* SYNTAX:
*
*  x1 va1 va2 vb1 vb2 vshield coupledwires
*  +  l          = 100.0u  // transmission line length       
*  +  w          = 2.4u    // transmission line width
*  +  d          = 0.7     // distance between wires 	    
*  +  shieldsads = 0       // optional shielding	     
*  +  s          = 6.0u    // distance to side shielding     
*  +  nlev       = 3       // number of metal wiring levels  
*  +  layerads   = 5       // signal layer		     
*  +  overads    = 1       // ground layer		     
*  +  dtemp      = 0       // difference in temperature between line and circuit (C)
*
***************************************************************************
* NOTES:
*
*  1. Length can vary continuously up to 1000um
*
*  2. Width can vary continuously withing DRC rules
*
*  3. Number of total metal levels (nlev) always includes M1, MT and AM. 
*     Possible values = 3, 4, 5, 6 or 7.
*
* IBM CONFIDENTIAL
* (C) 2007 IBM Corporation
*
***************************************************************************
*
simulator lang = spectre 
*
** coupledwires circuit element difinition ********************************
*
subckt coupledwires ( va1 va2 vb1 vb2 vshield )
parameters
*
** coupledwires default parameters ****************************************
+  l          = 100.0u
+  w          = 2.4u
+  d          = 0.7u
+  shieldsads = 0
+  s          = 6.0u
+  nlev       = 3
+  layerads   = 5
+  overads    = 1
+  dtemp      = 0
*
** aditional constants and parameters *************************************     
+  rt   = 3.162278
*
+  wsmx = 0.28e-6
+  wsmt = 0.56e-6
+  wsam = 4.00e-6
*
+  slt  = (shieldsads==0)*6.0u+(shieldsads==1)*s
*
** metal stack ************************************************************
+  m1top3 = -m1m2t 
+  m1bot3 =  m1top3 - m1t
*       
+  m2top4 = -mxmtt 
+  m2bot4 =  m2top4 - m2t 
+  m1top4 =  m2bot4 - m1m2t
+  m1bot4 =  m1top4 - m1t
*
+  m3top5 = -mxmtt  
+  m3bot5 =  m3top5 - m3t
+  m2top5 =  m3bot5 - m2m3t
+  m2bot5 =  m2top5 - m2t
+  m1top5 =  m2bot5 - m1m2t
+  m1bot5 =  m1top5 - m1t
*
+  m4top6 = -mxmtt  
+  m4bot6 =  m4top6 - m4t
+  m3top6 =  m4bot6 - m3m4t
+  m3bot6 =  m3top6 - m3t
+  m2top6 =  m3bot6 - m2m3t
+  m2bot6 =  m2top6 - m2t
+  m1top6 =  m2bot6 - m1m2t
+  m1bot6 =  m1top6 - m1t
*
+  m5top7 = -mxmtt  
+  m5bot7 =  m5top7 - m5t
+  m4top7 =  m5bot7 - m4m5t
+  m4bot7 =  m4top7 - m4t
+  m3top7 =  m4bot7 - m3m4t
+  m3bot7 =  m3top7 - m3t
+  m2top7 =  m3bot7 - m2m3t
+  m2bot7 =  m2top7 - m2t
+  m1top7 =  m2bot7 - m1m2t
+  m1bot7 =  m1top7 - m1t
*
+  mtbota =  0.0 
+  mttopa =  mtt
+  ambota =  mttopa + mtamt
+  amtopa =  ambota + amt 
*
** to calculate th, th_g, h ***********************************************
+  ly3 = (nlev==3)
+  ly4 = (nlev==4)
+  ly5 = (nlev==5)
+  ly6 = (nlev==6)
+  ly7 = (nlev==7)
*
+  layer_bota = (layerads==6)*mtbota+(layerads==7)*ambota
+  layer_bot3 = ly3*(layer_bota)
+  layer_bot4 = ly4*(layer_bota+(layerads==2)*m2bot4)
+  layer_bot5 = ly5*(layer_bota+(layerads==2)*m2bot5+(layerads==3)*m3bot5)
+  layer_bot6 = ly6*(layer_bota+(layerads==2)*m2bot6+(layerads==3)*m3bot6+(layerads==4)*m4bot6)
+  layer_bot7 = ly7*(layer_bota+(layerads==2)*m2bot7+(layerads==3)*m3bot7+(layerads==4)*m4bot7+(layerads==5)*m5bot7)
+  layer_botf = layer_bot3+layer_bot4+layer_bot5+layer_bot6+layer_bot7
*
+  over_topa  = (overads==6)*mttopa
+  over_top3  = ly3*(over_topa+(overads==1)*m1top3)
+  over_top4  = ly4*(over_topa+(overads==1)*m1top4+(overads==2)*m2top4)
+  over_top5  = ly5*(over_topa+(overads==1)*m1top5+(overads==2)*m2top5+(overads==3)*m3top5)
+  over_top6  = ly6*(over_topa+(overads==1)*m1top6+(overads==2)*m2top6+(overads==3)*m3top6+(overads==4)*m4top6)
+  over_top7  = ly7*(over_topa+(overads==1)*m1top7+(overads==2)*m2top7+(overads==3)*m3top7+\
                (overads==4)*m4top7+(overads==5)*m5top7)
+  over_topf  = over_top3+over_top4+over_top5+over_top6+over_top7
*
** distance between signal line and ground ********************************
+  hl = abs(layer_botf-over_topf)
*
** signal line thickness  - th ********************************************
+  thl = (layerads==2)*m2t+(layerads==3)*m3t+(layerads==4)*m4t+(layerads==5)*m5t+(layerads==6)*mtt+(layerads==7)*amt
*
** ground plane thickness - th_g ******************************************
+  th_gl = (overads==1)*m1t+(overads==2)*m2t+(overads==3)*m3t+(overads==4)*m4t+(overads==5)*m5t+(overads==6)*mtt
*
** effective dimensions ***************************************************
+  wslt = ((layerads==2)+(layerads==3)+(layerads==4)+(layerads==5))*wsmx+(layerads==6)*wsmt+(layerads==7)*wsam
+  wglt = (shieldsads==0)*(d+2.0*(w+hl+thl))+(shieldsads==1)*(d+2.0*(w+slt+wslt))
*
+  dlw = (layerads==2)*delm2+(layerads==3)*delm3+(layerads==4)*delm4+\
         (layerads==5)*delm5+(layerads==6)*delmt+(layerads==7)*delam
*
+  wl  = w+dlw
+  wsl = wslt+dlw
+  sl  = abs(slt-dlw)
+  dl  = abs(d-dlw)
+  wgl = wglt+(overads==1)*delm1+(overads==2)*delm2+(overads==3)*delm3+\
         (overads==4)*delm4+(overads==5)*delm5+(overads==6)*delmt
*
** total resistance - R_tot calculation ***********************************
+  tsigrs = 1.0+(temp+dtemp-25.0)*((layerads==2)*tm2rs+(layerads==3)*tm3rs+\
            (layerads==4)*tm4rs+(layerads==5)*tm5rs+(layerads==6)*tmtrs+(layerads==7)*tamrs)
*
+  tgndrs = 1.0+(temp+dtemp-25.0)*((overads==1)*tm1rs+(overads==2)*tm2rs+(overads==3)*tm3rs+\
            (overads==4)*tm4rs+(overads==5)*tm5rs+(overads==6)*tmtrs)
*
+  Rsig  = (layerads==2)*m2rs+(layerads==3)*m3rs+(layerads==4)*m4rs+\
           (layerads==5)*m5rs+(layerads==6)*mtrs+(layerads==7)*amrs
+  m1rst = m1rs/(0.80+0.20*(1.68e-6/wgl))
+  Rgnd  = (overads==1)*m1rst+(overads==2)*m2rs+(overads==3)*m3rs+\
           (overads==4)*m4rs+(overads==5)*m5rs+(overads==6)*mtrs
*
+  Rtotl = Rsig * l / wl * tsigrs
*
*** total capacitance - C_tot calculation *********************************
+  al  = 2.0 * atan( 0.5 * dl / hl )
+  bt  = pi / 2.0 - al
*
+  ld0 = (dl>=2.0*(hl+thl))
+  ld1 = (dl<2.0*(hl+thl))
+  ld2 = (dl>=2.0*hl)
+  ld3 = (dl<2.0*hl)
*
+  ls0 = (sl>=2.0*(hl+thl))
+  ls1 = (sl<2.0*(hl+thl))
+  ls2 = (sl>=2.0*hl)
+  ls3 = (sl<2.0*hl)
*
+  Cpl0_right_no = e0*(0.5217*wl/hl+0.9258+0.4779*log(1+thl/hl))
+  Cpl1_right_no = e0*(0.5217*wl/hl+0.9258+0.4779*log(0.5*dl/hl))
+  Cpl2_right_no = e0*(0.5217*wl/hl+1.1702*(1-cos(al))/(al-sin(al))*log(al/sin(al)))
*
+  Cpl_right_no  = ld0 * Cpl0_right_no + ld1 * ( ld2 * Cpl1_right_no + ld3 * Cpl2_right_no )
*
+  Cpl_left_no   = e0*(0.5217*wl/hl+0.9258+0.4779*log(1+thl/hl))
*
+  Cself_no      = Cpl_right_no + Cpl_left_no
*
+  Cmutual0_no = e0*(0.2967*log(1+wl/dl)+0.1537)
+  Cmutual1_no = e0*(0.2967*log(1+wl/dl)+0.1537+1.7460*(thl+hl-0.5*dl)/dl)
+  Cmutual2_no = e0*(0.2967*log(1+wl/dl)+0.1537+1.7460*thl/dl+0.7058*(1-cos(bt))/(bt-sin(bt))*log(bt/sin(bt)))
*
+  Cmutual_no  = ld0 * Cmutual0_no + ld1 * ( ld2 * Cmutual1_no + ld3 * Cmutual2_no )
*
+  al_s = 2.0 * atan( 0.5 * sl / hl )
+  bt_s = pi / 2.0 - al_s
*
+  al_d = 2.0 * atan( 0.5 * dl / hl )
+  bt_d = pi / 2.0 - al_d
*
+  Cpl0_right_yes = e0*(0.5076*wl/hl+0.4560+0.9108*log(1+thl/hl))
+  Cpl1_right_yes = e0*(0.5076*wl/hl+0.4560+0.9108*log(0.5*dl/hl))
+  Cpl2_right_yes = e0*(0.5076*wl/hl+0.5764*(1-cos(al_d))/(al_d-sin(al_d))*log(al_d/sin(al_d)))
*
+  Cpl_right_yes  = ld0 * Cpl0_right_yes + ld1 * ( ld2 * Cpl1_right_yes + ld3 * Cpl2_right_yes )
*
+  Cpl0_left_yes  = e0*(0.5076*wl/hl+0.4560+0.9108*log(1+thl/hl))
+  Cpl1_left_yes  = e0*(0.5076*wl/hl+0.4560+0.9108*log(0.5*sl/hl))
+  Cpl2_left_yes  = e0*(0.5076*wl/hl+0.5764*(1-cos(al_s))/(al_s-sin(al_s))*log(al_s/sin(al_s)))
*
+  Cpl_left_yes   = ls0 * Cpl0_left_yes + ls1 * ( ls2 * Cpl1_left_yes + ls3 * Cpl2_left_yes )
*
+  Cmutual0_yes = e0*(0.2897*log(1+wl/dl)+0.1215) 
+  Cmutual1_yes = e0*(0.2897*log(1+wl/dl)+0.1215+1.4529*(thl+hl-0.5*dl)/dl)
+  Cmutual2_yes = e0*(0.2897*log(1+wl/dl)+0.1215+1.4529*thl/dl+0.4049*(1-cos(bt_d))/(bt_d-sin(bt_d))*log(bt_d/sin(bt_d)))
*
+  Cmutual_yes = ld0 * Cmutual0_yes + ld1 * ( ld2 * Cmutual1_yes + ld3 * Cmutual2_yes )
*
+  Cs0 = e0*(0.2651*log(1+wl/sl)+0.7453)
+  Cs1 = e0*(0.2651*log(1+wl/sl)+0.7453+0.9045*(thl+hl-0.5*sl)/sl)
+  Cs2 = e0*(0.2651*log(1+wl/sl)+0.7453+0.9045*thl/sl+0.3616*(1-cos(bt_s))/(bt_s-sin(bt_s))*log(bt_s/sin(bt_s)))
*
+  Cs = ls0 * Cs0 + ls1 * ( ls2 * Cs1 + ls3 * Cs2 )
*
+  Cself_yes = Cpl_right_yes + Cpl_left_yes + Cs
*
+  Ctotl  = ( (shieldsads==0) * Cself_no + (shieldsads==1) * Cself_yes ) * eoxdepo * l
+  Cctotl = ( (shieldsads==0) * Cmutual_no + (shieldsads==1) * Cmutual_yes ) * eoxdepo * l
*
** coupling factor - K ****************************************************
+  Kl =  Cctotl / ( Ctotl + Cctotl ) 
*
** high - frequency inductance - L_tot calc. ******************************
+  tofl  = l * sqrt( eoxdepo ) / 3.0e8
+  Ltotl = tofl * tofl / Ctotl * ( Ctotl + Cctotl ) / ( Ctotl + 2.0 * Cctotl )
*
*** delta_R, delta_L calculation ******************************************
+  t1   = thl
+  t2   = th_gl
+  w1   = wl
+  Rs1  = Rsig * tsigrs
+  Rs2  = Rgnd * tgndrs
+  w3   = wsl
+  w2   = wgl
+  w21  = w1 + 2.0 * ( t1 + hl )
+  w211 = w2 - dl - w1
+  row  = Rsig * t1 * tsigrs
+  fil  = row / ( pi * mu0 * t1 * t1 )
*
+  delta_L1  = (8*w1 - (8-pi)*t1)*t1/(64*w1*(4*w1 - (4-pi)*t1))
+  delta_L2  = ((2*w1 - (pi-2)*t1) - pi*(2*w1-(6-pi)*t1)/(16-2*pi))/(64*w1-8*pi*w1)
+  delta_L3  = (3*pi*t1/32)/(16*w1-2*pi*w1)
+  delta_L4  = (pi*pow((2*w1-(6-pi)*t1),2))/(w1*t1*pow((16-2*pi),3))
+  delta_L5  = (2*w1 - (pi-2)*t1)*(2*w1-(6-pi)*t1)/(w1*t1*pow((16-2*pi),2))
+  delta_L6  = (1-pi/4)*t1/(w1*(16-2*pi))
+  delta_L7  = (t1/2 + (2*w1-(6-pi)*t1)/(16-2*pi))/(t1/4 + (2*w1-(6-pi)*t1)/(16-2*pi))
+  delta_L8  = (8*w21 - (8-pi)*t2)*t2/(64*w21*(4*w21 - (4-pi)*t2))
+  delta_L9  = ((2*w21 - (pi-2)*t2) - pi*(2*w21-(6-pi)*t2)/(16-2*pi))/(64*w21-8*pi*w21)
+  delta_L10 = (3*pi*t2/32)/(16*w21-2*pi*w21)
+  delta_L11 = (pi*pow((2*w21-(6-pi)*t2),2))/(w21*t2*pow((16-2*pi),3))
+  delta_L12 = (2*w21 - (pi-2)*t2)*(2*w21-(6-pi)*t2)/(w21*t2*pow((16-2*pi),2))
+  delta_L13 = (1-pi/4)*t2/(w21*(16-2*pi))
+  delta_L14 = (t2/2 + (2*w21-(6-pi)*t2)/(16-2*pi))/(t2/4 + (2*w21-(6-pi)*t2)/(16-2*pi))          
+  delta_L15 = 1 + (t2/2 + hl)/(w1/pi + t1/pi)
+  delta_L16 = 1 + (t1/2 + hl)/(w2/pi + t2/pi)           
+  delta_L17off = 0.5*(1+tanh((0.35-w1/w2)/0.16))*(3.105*(0.721*w2+5*\
                  w2*log(w2)+9.9*hl+4.9*t1+4.99*t2)/(100*w2)-0.15525*\
                  log(2*hl+t1+t2)-0.1776)
+  delta_L17on = 0.5*(1+tanh((0.35-w1/w2)/0.16))*(3.105*(0.721*w2+5*w2*\
                 log(w2)+9.9*hl+4.9*t1+4.99*t2)/(100*w2)-0.15525*\
                 log(2*hl+t1+t2)-0.1776)   
+  delta_L18 = (8*w211 - (8-pi)*t2)*t2/(64*w211*(4*w211 - (4-pi)*t2))
+  delta_L19 = ((2*w211 - (pi-2)*t2) - pi*(2*w211-(6-pi)*t2)/(16-2*pi))/(64*w211-8*pi*w211)
+  delta_L20 = (3*pi*t2/32)/(16*w211-2*pi*w211)
+  delta_L21 = (pi*pow((2*w211-(6-pi)*t2),2))/(w211*t2*pow((16-2*pi),3))
+  delta_L22 = (2*w211 - (pi-2)*t2)*(2*w211-(6-pi)*t2)/(w211*t2*pow((16-2*pi),2))
+  delta_L23 = (1-pi/4)*t2/(w211*(16-2*pi))
+  delta_L24 = (t2/2 + (2*w211-(6-pi)*t2)/(16-2*pi))/(t2/4 + (2*w211-(6-pi)*t2)/(16-2*pi))           
+  delta_L25 = (2*w3+2*t1+2*pi*sqrt(pow((sl+w1/2),2)+pow((t2/2 + hl),2)))/(2*w3+2*t1+2*pi*(sl+w1/2))
+  delta_L26 = (2*w3+2*t1+2*pi*sqrt(pow((sl+3*w1/2+dl),2)+pow((t2/2 + hl),2)))/\
               (2*w3+2*t1+2*pi*(sl+3*w1/2+dl))
*
+  delta_Ll_no = mu0*l*(delta_L1 + delta_L2 + delta_L3 + (delta_L4-\
                 delta_L5 - delta_L6)*log(delta_L7)+\
                 (w21/w2)*delta_L8 + delta_L9 + delta_L10+\
                 (delta_L11 - delta_L12 - delta_L13)*log(delta_L14)+\
                 (1/(2*pi))*(log(delta_L15) + log(delta_L16)) + delta_L17off)
*
+  delta_Ll_yes = mu0*l*(delta_L1+delta_L2+delta_L3+(delta_L4-\
                  delta_L5 - delta_L6)*log(delta_L7)+\
                  (w211*Rs1/(w2*Rs1+2*w3*Rs2))*delta_L18+delta_L19+\
                  delta_L20 + (delta_L21 - delta_L22-\
                  delta_L23)*log(delta_L24)+\
                  (1/(2*pi))*(log(delta_L15)+\
                  (Rs1/(Rs1+2*w3*Rs2/w2))*log(delta_L16))-\
                  (Rs2/(2*Rs2+Rs1*w2/w3))*(1/pi)*(log(delta_L25)+\
                  log(delta_L26))+delta_L17on)
*
+  L0l = (shieldsads==0)*delta_Ll_no+(shieldsads==1)*delta_Ll_yes
*
+  delta_Ll = ( pow(rt,2) / ( pow(rt,2) + rt + 1.0 ) ) * abs( L0l - Ltotl )
+  delta_Rl = 2.0 * pi * rt * ( delta_Ll * fil )
*
** lumped element network *************************************************
c0  (vshield net42)   capacitor  c = (Ctotl/7.0) 
c1  (vshield net70)   capacitor  c = (Ctotl/7.0) 
c2    (net61 net42)   capacitor  c = (Cctotl/7.0) 
c3    (net31 net28)   capacitor  c = (Cctotl/7.0) 
c4    (net16 net70)   capacitor  c = (Cctotl/7.0)
c5    (net20 net69)   capacitor  c = (Cctotl/7.0) 
c6  (vshield net56)   capacitor  c = (Ctotl/7.0) 
c7  (vshield vb1)     capacitor  c = (Ctotl/14.0) 
c8      (va1 va2)     capacitor  c = (Cctotl/14.0)
c9    (net25 net26)   capacitor  c = (Cctotl/7.0) 
c10 (vshield net26)   capacitor  c = (Ctotl/7.0) 
c11 (vshield va2)     capacitor  c = (Ctotl/14.0) 
c12 (vshield net58)   capacitor  c = (Ctotl/7.0) 
c13 (vshield vb2)     capacitor  c = (Ctotl/14.0) 
c14 (vshield net69)   capacitor  c = (Ctotl/7.0) 
c15 (vshield net16)   capacitor  c = (Ctotl/7.0) 
c16 (vshield net31)   capacitor  c = (Ctotl/7.0) 
c17 (vshield net20)   capacitor  c = (Ctotl/7.0) 
c18   (net56 net58)   capacitor  c = (Cctotl/7.0) 
c19 (vshield net61)   capacitor  c = (Ctotl/7.0) 
c20     (vb1 vb2)     capacitor  c = (Cctotl/14.0) 
c21 (vshield net25)   capacitor  c = (Ctotl/7.0) 
c22 (vshield va1)     capacitor  c = (Ctotl/14.0) 
c23 (vshield net28)   capacitor  c = (Ctotl/7.0) 
l24   (net22 net30)   inductor   l = (delta_Ll/7.0) 
l25     (va2 net73)   inductor   l = (Ltotl/7.0) 
l26   (net28 net62)   inductor   l = (Ltotl/7.0)
l27   (net25 net75)   inductor   l = (Ltotl/7.0) 
l28   (net36 net61)   inductor   l = ((delta_Ll/(rt*rt))/7.0) 
l29   (net74 net66)   inductor   l = (delta_Ll/7.0) 
l30   (net45 net18)   inductor   l = (delta_Ll/7.0) 
l31   (net66 net38)   inductor   l = ((delta_Ll/rt)/7.0) 
l32   (net16 net41)   inductor   l = (Ltotl/7.0) 
l33   (net72 net31)   inductor   l = ((delta_Ll/(rt*rt))/7.0) 
l34    (net7 net36)   inductor   l = ((delta_Ll/rt)/7.0)
l35   (net18 net72)   inductor   l = ((delta_Ll/rt)/7.0) 
l36   (net12 vb1)     inductor   l = ((delta_Ll/(rt*rt))/7.0)
l37   (net44 net25)   inductor   l = ((delta_Ll/(rt*rt))/7.0) 
l38   (net60 net12)   inductor   l = ((delta_Ll/rt)/7.0) 
l39   (net38 net16)   inductor   l = ((delta_Ll/(rt*rt))/7.0) 
l40   (net20 net40)   inductor   l = (Ltotl/7.0) 
l41   (net48 net56)   inductor   l = ((delta_Ll/(rt*rt))/7.0)
l42   (net59 net64)   inductor   l = (delta_Ll/7.0) 
l43   (net64 net48)   inductor   l = ((delta_Ll/rt)/7.0) 
l44   (net56 net52)   inductor   l = (Ltotl/7.0) 
l45    (net9 net7)    inductor   l = (delta_Ll/7.0) 
l46   (net61 net27)   inductor   l = (Ltotl/7.0)
l47   (net31 net32)   inductor   l = (Ltotl/7.0) 
l48   (net71 net20)   inductor   l = ((delta_Ll/(rt*rt))/7.0) 
l49   (net19 net23)   inductor   l = (delta_Ll/7.0) 
l50   (net23 net44)   inductor   l = ((delta_Ll/rt)/7.0) 
l51   (net49 net67)   inductor   l = (delta_Ll/7.0) 
l52   (net67 net71)   inductor   l = ((delta_Ll/rt)/7.0) 
l53     (va1 net55)   inductor   l = (Ltotl/7.0) 
l54   (net76 net60)   inductor   l = (delta_Ll/7.0) 
l55   (net50 net46)   inductor   l = ((delta_Ll/rt)/7.0) 
l56   (net77 net50)   inductor   l = (delta_Ll/7.0) 
l57   (net46 net58)   inductor   l = ((delta_Ll/(rt*rt))/7.0) 
l58   (net42 net11)   inductor   l = (Ltotl/7.0) 
l59   (net43 net37)   inductor   l = (delta_Ll/7.0) 
l60   (net51 net10)   inductor   l = (delta_Ll/7.0) 
l61   (net13 net8)    inductor   l = (delta_Ll/7.0) 
l62   (net17 net69)   inductor   l = ((delta_Ll/(rt*rt))/7.0) 
l63   (net26 net6)    inductor   l = (Ltotl/7.0) 
l64   (net68 net42)   inductor   l = ((delta_Ll/(rt*rt))/7.0)
l65   (net63 net15)   inductor   l = (delta_Ll/7.0) 
l66   (net35 net33)   inductor   l = (delta_Ll/7.0) 
l67   (net15 net24)   inductor   l = ((delta_Ll/rt)/7.0) 
l68   (net70 net39)   inductor   l = (Ltotl/7.0) 
l69   (net47 net28)   inductor   l = ((delta_Ll/(rt*rt))/7.0)
l70   (net10 net68)   inductor   l = ((delta_Ll/rt)/7.0)
l71   (net33 net47)   inductor   l = ((delta_Ll/rt)/7.0) 
l72   (net21 vb2)     inductor   l = ((delta_Ll/(rt*rt))/7.0) 
l73   (net54 net26)   inductor   l = ((delta_Ll/(rt*rt))/7.0)
l74   (net30 net21)   inductor   l = ((delta_Ll/rt)/7.0)
l75   (net24 net70)   inductor   l = ((delta_Ll/(rt*rt))/7.0) 
l76   (net69 net53)   inductor   l = (Ltotl/7.0) 
l77   (net37 net54)   inductor   l = ((delta_Ll/rt)/7.0) 
l78    (net8 net17)   inductor   l = ((delta_Ll/rt)/7.0)
l79   (net58 net78)   inductor   l = (Ltotl/7.0) 
k80  mutual_inductor  coupling = Kl  ind1 = l53 ind2 = l25 
k81  mutual_inductor  coupling = Kl  ind1 = l27 ind2 = l63 
k82  mutual_inductor  coupling = Kl  ind1 = l32 ind2 = l68 
k83  mutual_inductor  coupling = Kl  ind1 = l47 ind2 = l26 
k84  mutual_inductor  coupling = Kl  ind1 = l40 ind2 = l76 
k85  mutual_inductor  coupling = Kl  ind1 = l44 ind2 = l79 
k86  mutual_inductor  coupling = Kl  ind1 = l46 ind2 = l58 
r87   (net38 net16)   resistor   r = (delta_Rl*rt*rt/7.0) 
r88   (net18 net72)   resistor   r = (delta_Rl*rt/7.0) 
r89   (net72 net31)   resistor   r = (delta_Rl*rt*rt/7.0)
r90   (net66 net38)   resistor   r = (delta_Rl*rt/7.0) 
r91   (net41 net45)   resistor   r = (Rtotl/7.0) 
r92   (net45 net18)   resistor   r = (delta_Rl/7.0) 
r93    (net9 net7)    resistor   r = (delta_Rl/7.0) 
r94   (net12 vb1)     resistor   r = (delta_Rl*rt*rt/7.0) 
r95   (net52 net9)    resistor   r = (Rtotl/7.0) 
r96    (net7 net36)   resistor   r = (delta_Rl*rt/7.0) 
r97   (net75 net74)   resistor   r = (Rtotl/7.0) 
r98   (net36 net61)   resistor   r = (delta_Rl*rt*rt/7.0) 
r99   (net60 net12)   resistor   r = (delta_Rl*rt/7.0) 
r100  (net74 net66)   resistor   r = (delta_Rl/7.0) 
r101  (net76 net60)   resistor   r = (delta_Rl/7.0) 
r102  (net44 net25)   resistor   r = (delta_Rl*rt*rt/7.0) 
r103  (net40 net59)   resistor   r = (Rtotl/7.0) 
r104  (net59 net64)   resistor   r = (delta_Rl/7.0) 
r105  (net64 net48)   resistor   r = (delta_Rl*rt/7.0) 
r106  (net48 net56)   resistor   r = (delta_Rl*rt*rt/7.0) 
r107  (net23 net44)   resistor   r = (delta_Rl*rt/7.0) 
r108  (net19 net23)   resistor   r = (delta_Rl/7.0) 
r109  (net32 net49)   resistor   r = (Rtotl/7.0) 
r110  (net49 net67)   resistor   r = (delta_Rl/7.0) 
r111  (net27 net76)   resistor   r = (Rtotl/7.0) 
r112  (net67 net71)   resistor   r = (delta_Rl*rt/7.0) 
r113  (net71 net20)   resistor   r = (delta_Rl*rt*rt/7.0) 
r114  (net55 net19)   resistor   r = (Rtotl/7.0) 
r115  (net24 net70)   resistor   r = (delta_Rl*rt*rt/7.0) 
r116  (net33 net47)   resistor   r = (delta_Rl*rt/7.0) 
r117  (net47 net28)   resistor   r = (delta_Rl*rt*rt/7.0) 
r118  (net15 net24)   resistor   r = (delta_Rl*rt/7.0) 
r119  (net39 net35)   resistor   r = (Rtotl/7.0) 
r120  (net35 net33)   resistor   r = (delta_Rl/7.0) 
r121  (net51 net10)   resistor   r = (delta_Rl/7.0) 
r122  (net21 vb2)     resistor   r = (delta_Rl*rt*rt/7.0) 
r123  (net78 net51)   resistor   r = (Rtotl/7.0) 
r124  (net10 net68)   resistor   r = (delta_Rl*rt/7.0) 
r125   (net6 net63)   resistor   r = (Rtotl/7.0) 
r126  (net68 net42)   resistor   r = (delta_Rl*rt*rt/7.0) 
r127  (net30 net21)   resistor   r = (delta_Rl*rt/7.0) 
r128  (net63 net15)   resistor   r = (delta_Rl/7.0) 
r129  (net22 net30)   resistor   r = (delta_Rl/7.0) 
r130  (net54 net26)   resistor   r = (delta_Rl*rt*rt/7.0) 
r131  (net53 net77)   resistor   r = (Rtotl/7.0) 
r132  (net77 net50)   resistor   r = (delta_Rl/7.0) 
r133  (net50 net46)   resistor   r = (delta_Rl*rt/7.0) 
r134  (net46 net58)   resistor   r = (delta_Rl*rt*rt/7.0) 
r135  (net37 net54)   resistor   r = (delta_Rl*rt/7.0) 
r136  (net43 net37)   resistor   r = (delta_Rl/7.0) 
r137  (net62 net13)   resistor   r = (Rtotl/7.0) 
r138  (net13 net8)    resistor   r = (delta_Rl/7.0) 
r139  (net11 net22)   resistor   r = (Rtotl/7.0) 
r140   (net8 net17)   resistor   r = (delta_Rl*rt/7.0) 
r141  (net17 net69)   resistor   r = (delta_Rl*rt*rt/7.0) 
r142  (net73 net43)   resistor   r = (Rtotl/7.0) 
*
ends coupledwires
